{{> header_webapp}}

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key={{google_api_key}}&libraries=places"></script>
<script src="/dist/d3.min.js"></script>
<script src="/js/sigstyleoptions.js"></script>


<script type="text/javascript">

function getDistanceFromLatLonInKm (lat1,lon1,lat2,lon2) {
    var R = 6371; // Radius of the earth in km
    var dLat = deg2rad(lat2-lat1);  // deg2rad below
    var dLon = deg2rad(lon2-lon1); 
    var a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
      Math.sin(dLon/2) * Math.sin(dLon/2)
      ; 
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
    var d = R * c; // Distance in km
    return d;
};

function deg2rad(deg) {
    return deg * (Math.PI/180)
};


$(document).ready(function() 
{
    var longitude=parseFloat({{sig.long}});
    var latitude=parseFloat({{sig.lat}});
    var maxDistanceKM=parseFloat({{sig.radiusKM}});
    
    console.log('INFO: initial bounds radiusKM ' + maxDistanceKM + ' at long ' + longitude );

    var latLng = new google.maps.LatLng(latitude, longitude);
    
    
    var mapOptions = 
    {
      center: latLng,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      styles: sigStyleOptions
    };
    var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
    
    
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    var circle = new google.maps.Circle({
      center: latLng,
      map: map,
      radius: maxDistanceKM*600.0, // NOTE: should be 1000 to convert from KM to M, but is less to reduce stripe created by fitBounds    
      strokeOpacity: 0.0,
      fillOpacity: 0.0      
    });
    
    //circle.bindTo('center', marker, 'position');
    map.fitBounds(circle.getBounds());

    
    searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
          return;
        }
        
        console.log ( 'DEBUG: ' + places );
        
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
    }); 
    
    
    google.maps.event.addListener(map, 'bounds_changed', function(event) 
    {
        
        var bounds= this.getBounds();
        var center= bounds.getCenter()
        var spans= bounds.toSpan();

        searchBox.setBounds(map.getBounds());

        //console.log('DEBUG: map center changed ' + center + ', span ' + spans );
        
        longitude= center.lng();
        latitude= center.lat();
        
        var long_radius= spans.lng()/4.0;
        var lat_radius= spans.lat()/4.0;
        
        var maxDistanceKM= getDistanceFromLatLonInKm ( 0, 0, 0, Math.max ( lat_radius, long_radius ) ).toFixed(3);

        console.log('DEBUG: map bounds changed. radius ' + lat_radius + ', ' + long_radius + ' maxDistanceKM ' + maxDistanceKM );
        
        circle.setRadius ( maxDistanceKM*1000.0 );
        
        getData();
    });
    
    google.maps.event.addListener(map, 'center_changed', function(event) 
    {
        //console.log('DEBUG: center changed');
        getData();
    });
    
    

    
    function intersect(r1, r2) {
        return !(r2.left > r1.right || 
                 r2.right < r1.left || 
                 r2.top > r1.bottom ||
                 r2.bottom < r1.top);
    }
    
    function makeGeometry ( dataset, projection ){
        
        dataset.loc = new google.maps.LatLng(dataset.latMerged, dataset.lngMerged);
        dataset.locProj = projection.fromLatLngToDivPixel(dataset.loc);
        
        if ( dataset.cssclass === 'staticdata'){
            dataset.radius= Math.sqrt( dataset.hoursMerged / Math.PI ) * 0.04;
        }
        else if ( dataset.cssclass === 'helpevent' ){
            dataset.radius= 20 + dataset.eventsMerged*0.5;
        }
        
        dataset.left= dataset.locProj.x - dataset.radius; 
        dataset.right= dataset.locProj.x + dataset.radius; 
        dataset.top= dataset.locProj.y - dataset.radius; 
        dataset.bottom= dataset.locProj.y + dataset.radius; 
    }

    
    function makeMergedPosition ( dataset, datasetCandidate ){

        if ( dataset.cssclass === datasetCandidate.cssclass && dataset.cssclass === 'staticdata'){
            
            var datasetWeight= dataset.hoursMerged / ( dataset.hoursMerged + datasetCandidate.hoursMerged ); 

            var latDiff=  datasetCandidate.lat - dataset.lat;
            var longDiff= datasetCandidate.lng - dataset.lng;
            
            dataset.latMerged= dataset.lat + ( latDiff * ( 1- datasetWeight ) ); 
            dataset.lngMerged= dataset.lng + ( longDiff * ( 1- datasetWeight ) ); 
        }
    }
    
    
    
    function makeHtml ( dataset ){
        
        if ( dataset.cssclass === 'staticdata'){

            var diameter= 2*dataset.radius+4;
            var center= dataset.radius+2;
            var radius= dataset.radius;
            

            
            if ( dataset.isMerged === 1 ){
                
                dataset.html= dataset.hoursMerged + ' h Freiwilligenarbeit<br />' + dataset.districtMerged + '<br /><a target="_blank" href="'+ dataset.source_url + '">Quelle</a> Jahr ' + dataset.year;
                dataset.markerhtml= '<svg height="'+diameter+'" width="'+diameter+'"><circle cx="'+center+'" cy="'+center+'" r="'+radius+'" stroke="white" stroke-width="1" fill="#AAF" fill-opacity="0.3" /></svg>';
            }
            else{
                
                dataset.html= dataset.hoursMerged + ' h Freiwilligenarbeit<br />' + dataset.district + '<br /><a target="_blank" href="'+ dataset.source_url + '">Quelle</a> Jahr ' + dataset.year;
                dataset.markerhtml= '<svg height="'+diameter+'" width="'+diameter+'"><circle cx="'+center+'" cy="'+center+'" r="'+radius+'" stroke="white" stroke-width="1" fill="#AAA" fill-opacity="0.5" /></svg>';
            }
        }
        else if ( dataset.cssclass === 'helpevent' ){
            
            var diameter= 2*(dataset.radius+1);
            var center= dataset.radius+2;
            var radius= dataset.radius;

            if ( dataset.isMerged === 1 ){
            
                dataset.html= dataset.eventsMerged + ' Hilfszusagen<br /><a target="_blank" href="https://www.help2day.org">Quelle: www.help2day.org</a>';
                dataset.markerhtml= 
                    '<svg height="'+diameter+'" width="'+diameter+'">'+
                    '<polyline points="0 '+diameter+', '+diameter/2+' 0, '+diameter+' '+diameter+'" stroke="white" stroke-width="1" fill="#07C" fill-opacity="0.6" />'+
                    '<text font-size="14" fill="white" font-family="Verdana" text-anchor="middle" alignment-baseline="baseline" x="'+center+'" y="'+center+'">'+dataset.eventsMerged+'</text>'+
                    '</svg>';
            }else{
                
                dataset.html= dataset.eventsMerged + ' Hilfszusage<br />' + dataset.shortDescription;
                dataset.markerhtml= '<svg height="'+diameter+'" width="'+diameter+'"><polyline points="0 '+diameter+', '+diameter/2+' 0, '+diameter+' '+diameter+'" stroke="white" stroke-width="1" fill="#07C" fill-opacity="0.7" /></svg>';
            }
        }
    }
    
    function transformData ( jsonData, displayData, projection ){
        
        // transform json data, add svgs
        for (var i = 0; i < jsonData.length; i++) {
            
            var dataset= jsonData[i];

            
            dataset.hoursMerged= dataset.hours;
            dataset.eventsMerged= dataset.events;
            dataset.districtMerged= dataset.district;
            dataset.latMerged= dataset.lat; 
            dataset.lngMerged= dataset.lng; 

            makeGeometry ( dataset, projection );            
            makeHtml ( dataset );

            dataset.isMerged= 0;
        }
        
        // merge overlapping elements if path is equal down to the merge point
        for (var i = 0; i < jsonData.length; i++ ) {
            
            var dataset= jsonData[i];

            if ( dataset.isMerged ){
                continue;
            }
            
            // search for overlapping elements with same path
            
            var foundMerge= 0;
            
            for (var j = i+1; j < jsonData.length; j++) {
            
                var datasetCandidate= jsonData[j];
                if ( datasetCandidate.isMerged )
                    continue;

                if ( intersect ( dataset, datasetCandidate ) ){

                    if ( dataset.cssclass === datasetCandidate.cssclass && dataset.cssclass === 'staticdata'){
                        
                        dataset.isMerged= 1;
                        datasetCandidate.isMerged= 1;

                        makeMergedPosition ( dataset, datasetCandidate );
                        
                        dataset.hoursMerged+= datasetCandidate.hoursMerged;
                        dataset.districtMerged= dataset.districtMerged + ', ' + datasetCandidate.districtMerged;
                        makeGeometry ( dataset, projection );            
                        makeHtml ( dataset );
                    }
                    
                    if ( dataset.cssclass === datasetCandidate.cssclass && dataset.cssclass === 'helpevent'){
                        
                        dataset.isMerged= 1;
                        datasetCandidate.isMerged= 1;

                        dataset.eventsMerged+= datasetCandidate.eventsMerged;
                        makeGeometry ( dataset, projection );            
                        makeHtml ( dataset );
                        //console.log ('INFO: merging helpevent ', dataset.eventsMerged );
                    }
                }
            }
            
            //console.log ('INFO: pushing ', dataset.district );
            
            displayData.push(dataset);
        }
        console.log ('INFO: merge found '+ displayData.length + ' sets ' );
    }
    
    
    
    
    //
    // Define the div for the tooltip
    //
    var div = d3.select("body").append("div")   
        .attr("class", "tooltip")               
        .style("opacity", 0);
    
    var url = "/sig/data";
    var jsonData={};
    
    function getData (){
        
        d3.json(url, function (error, json) {
            if (error) 
                throw error;

            console.log('DEBUG: received new data ', json.status );
            jsonData= json;
            
            overlay.draw();
        });
    }
    

    
    
    var layerOnMap;
    var overlay = new google.maps.OverlayView();
    overlay.draw = overlayDraw;
    overlay.onAdd = overlayAdd;
    overlay.setMap(map);

    
    
    function overlayAdd (){
        
        layerOnMap = d3.select(overlay.getPanes().overlayMouseTarget).append("div").attr("class", "dataset");
        console.log ('INFO: added overlay ', this );
    }
    
    function overlayDraw (){
        
        
        if ( !jsonData.data )
            return;
        if ( !layerOnMap )
            return;
        
        var projection = this.getProjection();

        console.log ('INFO: drawing overlay ', projection );

        var displayData= [];
        transformData ( jsonData.data, displayData, projection );
        
        var marker = layerOnMap.selectAll("div").data(d3.entries(displayData),function(d) { return d.value.id; });
        var markerUpdate= marker;
        var markerEnter= marker.enter();
        var markerExit= marker.exit();

        console.log ('DEBUG: enter ' + markerEnter.size() + ' exits ' + markerExit.size() + ' updates ' + markerUpdate.size() + ' old divs ' + layerOnMap.selectAll("div").size() );
        
        markerEnter.append("div")
            .style("opacity", 0)
            .attr("class", function(d){ return 'dataset ' + d.value.cssclass;} )
            .html(function(d){ return d.value.markerhtml;})
            .on("mouseout",mouseOut)
            .on("mouseover",mouseOver)
            .transition().delay(300).duration(500)
                .style("opacity", 1)
        ;
        
        markerExit.transition().duration(500).style("opacity", 0).remove();

        
        layerOnMap.selectAll("div").each(transform);
        
        
        function mouseOver (d){
            //console.log('DEBUG: mouseover ', d3.event.pageX );
            div.transition()        
                  .duration(200)      
                  .style("opacity", .9);      
            div .html( d.value.html )  
                  .style("left", (d3.event.pageX) + "px")     
                  .style("top", (d3.event.pageY - 28) + "px");
        }
        function mouseOut (d){
            //console.log('DEBUG: mouseout ', d3.event.pageX );
            div.transition()        
            .duration(500)      
            .style("opacity", 0);   
        }
        function transform(d) {
            return d3.select(this)
                .style("left", ( parseInt(d.value.locProj.x) - d.value.radius) + "px")
                .style("top", ( parseInt(d.value.locProj.y) - d.value.radius) + "px");
        }
    };

    
    

});    
</script>

<div class="pusher">

    <div class="ui basic vertical segment" style="margin-top:-20px;">
        <input id="pac-input" class="controls" type="text" placeholder="Adresse">
        <div id="map_canvas" style="height: calc(100vh - 70px); width:100%;"></div>
    </div>
</div>

{{> footer}}      